# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2016-03-31 11:23
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('AnswerText', models.CharField(max_length=500, verbose_name='Answer Text')),
                ('AnswerTagsOnly', models.CharField(blank=True, max_length=500, null=True, verbose_name='pos tags')),
                ('SentenceIndex', models.IntegerField(default=0)),
                ('LexicalDensity', models.FloatField()),
                ('ReadabilityIndex', models.FloatField()),
                ('PunctuationIndex', models.CharField(default='0', max_length=200, verbose_name='punctuation index')),
                ('cogX', models.FloatField(default=0)),
                ('cogY', models.FloatField(default=0)),
                ('center_of_gravity', models.FloatField(default=0)),
                ('AnswerRemarks', models.CharField(blank=True, max_length=500, verbose_name='Remarks')),
                ('LastUpdate', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='AnswerType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('AnswerType', models.CharField(max_length=100, verbose_name='Answer Type')),
                ('AnswerTypeDesc', models.CharField(max_length=200, verbose_name='Description of Answer Type')),
            ],
        ),
        migrations.CreateModel(
            name='Comprehension',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ComprehensionTitle', models.CharField(max_length=100, unique=True, verbose_name='Comprehension Title')),
                ('ComprehensionsText', models.TextField(verbose_name='Text')),
                ('ComprehensionTagged', models.TextField(blank=True, null=True, verbose_name='pos tagged text')),
                ('ComprehensionTagsOnly', models.TextField(blank=True, null=True, verbose_name='tags only')),
                ('ComprehensionsRemarks', models.CharField(blank=True, max_length=400, null=True, verbose_name='Remarks for this Comprehension')),
                ('LastUpdate', models.DateTimeField(auto_now=True, verbose_name='Last Updated')),
            ],
        ),
        migrations.CreateModel(
            name='Dictionary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Word', models.CharField(default='none', max_length=200, verbose_name='word')),
                ('WordType', models.CharField(max_length=200, null=True, verbose_name='word type')),
                ('StemmedWord', models.CharField(max_length=200, null=True, verbose_name='stemmed word')),
                ('NamedEntity', models.BooleanField(default=False, verbose_name='named entity')),
                ('CompoundWord', models.BooleanField(default=False, verbose_name='compound word')),
                ('LastUpdate', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Dictionary',
            },
        ),
        migrations.CreateModel(
            name='DictionarySet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='IndependentQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('QuestionText', models.CharField(max_length=500, verbose_name='Question Text')),
                ('QuestionTagged', models.CharField(blank=True, max_length=500, null=True, verbose_name='pos tagged text')),
                ('QuestionTagsOnly', models.CharField(blank=True, max_length=500, null=True, verbose_name='pos tags')),
                ('QuestionRemarks', models.CharField(blank=True, max_length=500, null=True, verbose_name='remarks')),
                ('LastUpdate', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='IndependentQuestionSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='NamedEntityType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('punjabi_name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Patterns',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PatternName', models.CharField(max_length=100, verbose_name='Pattern Name')),
                ('PatternDesc', models.CharField(max_length=350, verbose_name='Pattern Description')),
                ('PatternRegularExpression', models.CharField(max_length=350, verbose_name='Pattern Regular Expression')),
                ('AnswerTypeID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='qa.AnswerType', verbose_name='Answer Type')),
            ],
            options={
                'verbose_name': 'pattern',
                'verbose_name_plural': 'patterns',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('QuestionText', models.CharField(max_length=500, verbose_name='Question Text')),
                ('QuestionTagged', models.CharField(blank=True, max_length=500, null=True, verbose_name='pos tagged text')),
                ('QuestionTagsOnly', models.CharField(blank=True, max_length=500, null=True, verbose_name='pos tags')),
                ('LexicalDensity', models.FloatField()),
                ('ReadabilityIndex', models.FloatField()),
                ('PunctuationIndex', models.CharField(default='0', max_length=200, verbose_name='punctuation index')),
                ('cogX', models.FloatField(default=0)),
                ('cogY', models.FloatField(default=0)),
                ('center_of_gravity', models.FloatField(default=0)),
                ('QuestionRemarks', models.CharField(blank=True, max_length=500, null=True, verbose_name='remarks')),
                ('LastUpdate', models.DateTimeField(auto_now=True)),
                ('Comprehension', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='qa.Comprehension', verbose_name='comprehension')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('QuestionType', models.CharField(max_length=100, verbose_name='Question Type')),
                ('QuestionTypeDesc', models.CharField(max_length=200, verbose_name='Description of Question Type')),
            ],
        ),
        migrations.CreateModel(
            name='Statistics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('StatisticsTitle', models.CharField(max_length=200, verbose_name='Statistics Title')),
                ('StatisticsX', models.CharField(max_length=10, verbose_name='Statistics X')),
                ('StatisticsY', models.CharField(max_length=10, verbose_name='Statistics Y')),
            ],
        ),
        migrations.AddField(
            model_name='question',
            name='QuestionTypeID',
            field=models.ManyToManyField(to='qa.QuestionType', verbose_name='Question Type'),
        ),
        migrations.AddField(
            model_name='patterns',
            name='QuestionTypeID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='qa.QuestionType', verbose_name='Question Type'),
        ),
        migrations.AddField(
            model_name='independentquestion',
            name='QuestionSet',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='qa.IndependentQuestionSet', verbose_name='question set'),
        ),
        migrations.AddField(
            model_name='independentquestion',
            name='QuestionTypeID',
            field=models.ManyToManyField(to='qa.QuestionType', verbose_name='Question Type'),
        ),
        migrations.AddField(
            model_name='dictionary',
            name='DictionarySet',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='qa.DictionarySet', verbose_name='dictionary set'),
        ),
        migrations.AddField(
            model_name='dictionary',
            name='NamedEntityTypeID',
            field=models.ManyToManyField(blank=True, to='qa.NamedEntityType', verbose_name='named entity type'),
        ),
        migrations.AddField(
            model_name='answer',
            name='AnswerTypeID',
            field=models.ManyToManyField(blank=True, to='qa.AnswerType', verbose_name='Answer Type'),
        ),
        migrations.AddField(
            model_name='answer',
            name='Comprehension',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='qa.Comprehension', verbose_name='Comprehension'),
        ),
    ]
